{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar linkProviderId = 'emailLink';\nvar passwordProviderId = 'password';\nvar EmailAuthProvider = function () {\n  function EmailAuthProvider() {\n    _classCallCheck(this, EmailAuthProvider);\n    throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n  _createClass(EmailAuthProvider, null, [{\n    key: \"EMAIL_LINK_SIGN_IN_METHOD\",\n    get: function get() {\n      return linkProviderId;\n    }\n  }, {\n    key: \"EMAIL_PASSWORD_SIGN_IN_METHOD\",\n    get: function get() {\n      return passwordProviderId;\n    }\n  }, {\n    key: \"PROVIDER_ID\",\n    get: function get() {\n      return passwordProviderId;\n    }\n  }, {\n    key: \"credential\",\n    value: function credential(email, password) {\n      return {\n        token: email,\n        secret: password,\n        providerId: passwordProviderId\n      };\n    }\n  }, {\n    key: \"credentialWithLink\",\n    value: function credentialWithLink(email, emailLink) {\n      return {\n        token: email,\n        secret: emailLink,\n        providerId: linkProviderId\n      };\n    }\n  }]);\n  return EmailAuthProvider;\n}();\nexport { EmailAuthProvider as default };","map":{"version":3,"names":["linkProviderId","passwordProviderId","EmailAuthProvider","Error","email","password","token","secret","providerId","emailLink"],"sources":["E:/Projec/YPMath/node_modules/@react-native-firebase/auth/lib/providers/EmailAuthProvider.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nconst linkProviderId = 'emailLink';\nconst passwordProviderId = 'password';\n\nexport default class EmailAuthProvider {\n  constructor() {\n    throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n\n  static get EMAIL_LINK_SIGN_IN_METHOD() {\n    return linkProviderId;\n  }\n\n  static get EMAIL_PASSWORD_SIGN_IN_METHOD() {\n    return passwordProviderId;\n  }\n\n  static get PROVIDER_ID() {\n    return passwordProviderId;\n  }\n\n  static credential(email, password) {\n    return {\n      token: email,\n      secret: password,\n      providerId: passwordProviderId,\n    };\n  }\n\n  static credentialWithLink(email, emailLink) {\n    return {\n      token: email,\n      secret: emailLink,\n      providerId: linkProviderId,\n    };\n  }\n}\n"],"mappings":";;AAiBA,IAAMA,cAAc,GAAG,WAAW;AAClC,IAAMC,kBAAkB,GAAG,UAAU;AAAC,IAEjBC,iBAAiB;EACpC,6BAAc;IAAA;IACZ,MAAM,IAAIC,KAAK,CAAC,yEAAyE,CAAC;EAC5F;EAAC;IAAA;IAAA,KAED,eAAuC;MACrC,OAAOH,cAAc;IACvB;EAAC;IAAA;IAAA,KAED,eAA2C;MACzC,OAAOC,kBAAkB;IAC3B;EAAC;IAAA;IAAA,KAED,eAAyB;MACvB,OAAOA,kBAAkB;IAC3B;EAAC;IAAA;IAAA,OAED,oBAAkBG,KAAK,EAAEC,QAAQ,EAAE;MACjC,OAAO;QACLC,KAAK,EAAEF,KAAK;QACZG,MAAM,EAAEF,QAAQ;QAChBG,UAAU,EAAEP;MACd,CAAC;IACH;EAAC;IAAA;IAAA,OAED,4BAA0BG,KAAK,EAAEK,SAAS,EAAE;MAC1C,OAAO;QACLH,KAAK,EAAEF,KAAK;QACZG,MAAM,EAAEE,SAAS;QACjBD,UAAU,EAAER;MACd,CAAC;IACH;EAAC;EAAA;AAAA;AAAA,SA/BkBE,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}